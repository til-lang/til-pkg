#!/bin/bash

set -e

function log {
    echo $* >&2
}

function usage {
    log "Usage: $(basename $0) install_til|run|debug|pkgtest"
    log "   or: $(basename $0) install|remove|update package_git_url|package_name"
    exit 2
}

if [[ $TIL_ROOT == "" ]];then
    log "You must set TIL_ROOT environment variable"
    exit 1
fi

if [[ $1 == "" ]];then
    usage
else
    ACTION=$1
fi

if [ -d $TIL_ROOT/modules ];then
    [ -d $TIL_ROOT/packages ] || mkdir $TIL_ROOT/packages
    mv $TIL_ROOT/modules/* $TIL_ROOT/packages/
    rmdir $TIL_ROOT/modules
fi

function til_version {
    (
        cd repos/til
        VERSION=$(git describe --tags | cut -f1 -d'-')
        # v0.20.5 -> v0.20
        echo $VERSION | cut -f-2 -d'.'
    )
}

function run {
    case $ACTION in
        install)
            [ -d repos ] || mkdir repos
            [ -d packages ] || mkdir packages

            TIL_VERSION=$(til_version)

            URL=$2
            if ! echo $URL | grep -q "/";then
                # http -> GITHUB/til-http.git
                URL="https://github.com/til-lang/til-$URL.git"
            fi
            NAME=$(basename "$URL" | sed 's:\.git$::g;s:/til-::g;s:^til-::g')
            VERSION=$3  # Optional

            [ -d repos/$NAME ] && rm -rf repos/$NAME
            git clone "$URL" repos/$NAME

            ln -s $PWD/repos/til $PWD/repos/$NAME/til

            (
                cd repos/$NAME
                if [[ $VERSION == "" ]];then
                    # Latest tagged version ("vX.Y.Z") compatible
                    # with current Til's version:
                    VERSION=$(git tag | grep $TIL_VERSION | sort -rV | head -1)
                    if [[ $VERSION == "" ]];then
                        log "No version compatible with current Til's version ($TIL_VERSION.x) found"
                        VERSION=$(git tag | grep 'v[0-9]\+\.[0-9]\+\.' | sort -rV | head -1)
                        log "Using $VERSION instead..."
                    fi
                else
                    VERSION="v$VERSION"
                fi
                git checkout tags/$VERSION
                make
            )
            cp repos/$NAME/dist/libtil_*.so packages/ || echo "No .so files to copy"
            cp repos/$NAME/dist/*.til packages/ || echo "No .til files to copy"
            log "Done"
        ;;

    remove)
        NAME=$2
        FILEPATH="packages/libtil_$NAME.so"
        if [ -f $FILEPATH ];then
            rm $FILEPATH
            log "Package $NAME removed"
        else
            log "Package $NAME not found"
        fi
        ;;

    update)
        NAME=$2
        if [ ! -d repos/$NAME ];then
            log "Repository for $NAME not found"
            exit 3
        fi

        (
            cd repos/$NAME
            git fetch
            VERSION=$(git describe --tags | cut -f1 -d'-')
            # v0.20.7 -> v0.20
            V=$(echo $VERSION | cut -f-2 -d'.')
            NEXT=$(git tag | grep "$V" | sort -rV | head -1)
            if [[ $NEXT != $VERSION ]];then
                log "Updating from $VERSION to $NEXT..."
                git checkout tags/$NEXT
                make clean
                make
            else
                log "No new releases after $VERSION"
            fi
        )
        cp -u repos/$NAME/dist/libtil_*.so packages/
        log "Done"
        ;;

    esac
}

# Subcommands that can work without any argument:
case $ACTION in
    run)
        export TIL_PATH="$TIL_PATH:$TIL_ROOT/packages"
        export LD_LIBRARY_PATH="$TIL_ROOT/lib"
        shift 1
        exec $TIL_ROOT/bin/til $*
        ;;
    debug)
        export TIL_PATH="$TIL_PATH:$TIL_ROOT/packages"
        export LD_LIBRARY_PATH="$TIL_ROOT/repos/til/dist"
        shift 1
        exec $TIL_ROOT/repos/til/til.debug $*
        ;;
    install_til)
        cd $TIL_ROOT
        [ -d repos/til ] && rm -rf repos/til
        git clone "https://github.com/til-lang/til.git" repos/til

        (cd repos/til && make til.release)

        [ -d bin ] || mkdir bin
        cp repos/til/til.release bin/til
        [ -d lib ] || mkdir lib
        cp repos/til/dist/lib*.so lib

        log "Done: installed Til in $PWD/bin/til"
        ;;
    pkgtest)
        export TIL_PATH="$PWD/dist:$TIL_PATH:$TIL_ROOT/packages"
        export LD_LIBRARY_PATH="$TIL_ROOT/lib"
        shift 1
        exec $TIL_ROOT/bin/til test.til
        ;;
    *)
        # Subcommands that must receive an argument:
        if [[ $2 == "" ]];then
            usage
        else
            (cd $TIL_ROOT && run $*)
        fi
        ;;
esac
